openapi: 3.0.3
info:
  title: Credentials configuration service
  description: Provides and manages a the scopes to be requested and the trust-anchors(trusted-issuers-list and trusted-participants-list) per service/credential.
  version: 0.0.1
tags:
  - name: service
paths:
  /service:
    post:
      tags:
        - service
      operationId: createService
      summary: Create a service with its credentials configuration
      description: Create a service with the given configuration. If no id is provided, the service will generate one.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          description: Successfully created the service.
          headers:
            Location:
              schema:
                type: string
                format: uri
                example: /service/packet-delivery-service
              description: Location of the created service
        '400':
          description: Invalid service provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '409':
          description: Service with the given id already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - service
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Offset'
      operationId: getServices
      summary: Return all services
      description: Return all services configured, with pagination.
      responses:
        '200':
          description: The service config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Services'
        '400':
          description: Invalid query parameters provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /service/{id}:
    get:
      tags:
        - service
      parameters:
        - $ref: '#/components/parameters/Id'
      operationId: getService
      summary: Return the full service config by ID
      description: The service configuration, including all credentials and their trust anchors will be returned.
      responses:
        '200':
          description: The service config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: No such service exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - service
      parameters:
        - $ref: '#/components/parameters/Id'
      operationId: deleteServiceById
      description: Delete a single service(and all its configurations) with the given id.
      summary: Delete the service
      responses:
        '204':
          description: Successfully deleted
        '404':
          description: No such service exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - service
      parameters:
        - $ref: '#/components/parameters/Id'
      summary: Update a single service
      description: Updates a single service by fully overriding it.
      operationId: updateService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Successfully updated the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: No such service exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Invalid service provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /service/{id}/scope:
    get:
      tags:
        - service
      parameters:
        - $ref: '#/components/parameters/Id'
      operationId: getScopeForService
      summary: Get the scope for the service
      description: Returns the scope(e.g. credential types to be requested) for the requested service
      responses:
        '200':
          description: The scopes to be requested for the service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scope'
        '404':
          description: No such service exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

components:
  parameters:
    Id:
      name: id
      in: path
      required: true
      schema:
        type: string
        example: packet-delivery-service
    PageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        default: 100
        minimum: 1
    Offset:
      name: offset
      in: query
      schema:
        type: integer
        default: 0
        minimum: 0
  schemas:
    Scope:
      type: array
      description: A list of credential-types to be requested
      items:
        type: string
      example:
        - VerifiableCredential
        - CustomerCredential
    Credential:
      type: object
      description: A credential-type with its trust configuration
      properties:
        type:
          type: string
          description: Type of the credential
          example: VerifiableCredential
        trustedParticipantsLists:
          type: array
          description: |
            A list of (EBSI Trusted Issuers Registry compatible) endpoints to 
            retrieve the trusted participants from.
          items:
            type: string
            format: url
            example: https://tir-pdc.gaia-x.fiware.dev
        trustedIssuersLists:
          type: array
          description: |
            A list of (EBSI Trusted Issuers Registry compatible) endpoints to 
            retrieve the trusted issuers from. The attributes need to be formated
            to comply with the verifiers requirements.
          items:
            type: string
            format: url
            example: https://til-pdc.gaia-x.fiware.dev
      required:
        - type
    Service:
      type: object
      description: Configuration of a service and its credentials
      properties:
        id:
          type: string
          description: Id of the service to be configured. If no id is provided, the service will generate one.
          example: packet-delivery-service
        credentials:
          type: array
          description: All credential configurations for the service
          items:
            $ref: '#/components/schemas/Credential'
      required:
        - credentials
    Services:
      type: object
      description: The paginated list of services
      properties:
        total:
          type: integer
          description: Total number of services available
          example: 25
        offset:
          type: integer
          description: Offset used for the current page
          example: 0
        pageSize:
          type: integer
          description: Size of the returend page, can be less than the requested depending on the available entries
          example: 10
        services:
          type: array
          description: The list of services
          items:
            $ref: '#/components/schemas/Service'
    ProblemDetails:
      type: object
      properties:
        type:
          description: An absolute URI that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type.
          type: string
          format: uri
          ##default: about:blank
        title:
          description: A short summary of the problem type.
          type: string
          example: Internal Server Error
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          type: integer
          example: 500
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          type: string
          example: Connection timeout
        instance:
          description: An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
          type: string
          format: uri